import streamlit as st
import pandas as pd
import openai

# Configurar API Key de OpenAI
openai.api_key = st.secrets["OPENAI_API_KEY"]

# Funci√≥n para cargar el cat√°logo naturista
@st.cache_data
def cargar_catalogo():
    return pd.read_excel('naturista.xlsx')

# Mapeo interno: palabras clave asociadas a categor√≠as reales
mapa_categorias = {
    "visi√≥n": "ojos",
    "vista": "ojos",
    "ojos": "ojos",
    "ocular": "ojos",
    "circulaci√≥n": "circulacion",
    "sangre": "circulacion",
    "varices": "circulacion",
    "energ√≠a": "energia",
    "cansancio": "energia",
    "fatiga": "energia",
    "defensas": "vitaminas",
    "inmunidad": "vitaminas",
    "gripas": "vitaminas",
    "digesti√≥n": "digestion",
    "est√≥mago": "digestion",
    "colon": "digestion",
    "h√≠gado": "higado",
    "desintoxicar": "higado",
    "articulaciones": "articulaciones",
    "rodillas": "articulaciones",
    "huesos": "articulaciones",
    "diabetes": "diabetes",
    "az√∫car": "diabetes",
    "ansiedad": "tranquilidad",
    "dormir": "tranquilidad",
    "nervios": "tranquilidad",
    "pulmones": "respiratorio",
    "tos": "respiratorio",
    "bronquios": "respiratorio",
    "memoria": "funcion cerebral",
    "concentraci√≥n": "funcion cerebral",
}

# Funci√≥n para clasificar autom√°ticamente la necesidad
def clasificar_necesidad(texto_usuario):
    texto_usuario = texto_usuario.lower()
    for palabra, categoria in mapa_categorias.items():
        if palabra in texto_usuario:
            return categoria
    return None

# Cargar cat√°logo
df_productos = cargar_catalogo()

# Normalizar nombres de columnas
df_productos.columns = df_productos.columns.str.strip().str.lower()

# Detectar nombre de la columna categor√≠a
nombre_columna_categoria = df_productos.columns[4]

# Configuraci√≥n de la aplicaci√≥n
st.title("üîé Consulta - Karolo")

st.header("üëã Bienvenido. ¬øEn qu√© puedo asistirle hoy?")

st.markdown(
    """
    Puede realizar consultas como:

    - Quiero algo para la circulaci√≥n
    - ¬øQu√© recomiendas para fortalecer defensas?
    - ¬øTienes algo para la diabetes?
    """
)

# Entrada de necesidad del usuario
consulta_necesidad = st.text_input("Escriba su necesidad:")

if consulta_necesidad:
    st.info("üîé Analizando su consulta...")

    categoria_detectada = clasificar_necesidad(consulta_necesidad)

    if categoria_detectada:
        st.success(f"‚úÖ Necesidad detectada: **{categoria_detectada.capitalize()}**")

        # Filtrar productos de esa categor√≠a
        productos_categoria = df_productos[
            df_productos[nombre_columna_categoria].astype(str).str.lower() == categoria_detectada.lower()
        ]

        if not productos_categoria.empty:
            st.subheader("üéØ Productos disponibles:")

            # Mostrar listado limpio de productos
            for idx, row in productos_categoria.iterrows():
                codigo = str(row['c√≥digo'])
                nombre = row['nombre']
                precio = int(row['precio de venta con iva'])

                st.write(f"üîπ **C√≥digo:** {codigo} | **Nombre:** {nombre} | **Precio:** ${precio}")

        else:
            st.warning(f"‚ö†Ô∏è No se encontraron productos relacionados con: **{categoria_detectada.capitalize()}**.")

    else:
        st.warning("‚ö†Ô∏è No fue posible detectar su necesidad. Intente ser m√°s espec√≠fico o utilice t√©rminos comunes.")
