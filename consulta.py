import streamlit as st
import pandas as pd
import openai
import re

# Configurar API Key de OpenAI
openai.api_key = st.secrets["OPENAI_API_KEY"]

# Funci√≥n para cargar el cat√°logo naturista
@st.cache_data
def cargar_catalogo():
    try:
        return pd.read_excel('naturista.xlsx')
    except Exception as e:
        st.error(f"Error al cargar el cat√°logo: {e}")
        return pd.DataFrame()

# Mapeo interno: palabras clave asociadas a categor√≠as reales
mapa_categorias = {
    "visi√≥n": "ojos",
    "vista": "ojos",
    "ojos": "ojos",
    "ocular": "ojos",
    "circulaci√≥n": "circulacion",
    "sangre": "circulacion",
    "varices": "circulacion",
    "energ√≠a": "energia",
    "cansancio": "energia",
    "fatiga": "energia",
    "defensas": "vitaminas",
    "inmunidad": "vitaminas",
    "gripas": "vitaminas",
    "digesti√≥n": "digestion",
    "est√≥mago": "digestion",
    "colon": "digestion",
    "h√≠gado": "higado",
    "desintoxicar": "higado",
    "articulaciones": "articulaciones",
    "rodillas": "articulaciones",
    "huesos": "articulaciones",
    "diabetes": "diabetes",
    "az√∫car": "diabetes",
    "ansiedad": "tranquilidad",
    "dormir": "tranquilidad",
    "nervios": "tranquilidad",
    "pulmones": "respiratorio",
    "tos": "respiratorio",
    "bronquios": "respiratorio",
    "memoria": "funcion cerebral",
    "concentraci√≥n": "funcion cerebral",
}

# Funci√≥n para detectar si es una pregunta sobre beneficios
def detectar_consulta_beneficio(texto):
    patrones = ["para qu√© sirve", "beneficio", "beneficios", "ayuda", "utilidad",
                "para que sirve", "para que es bueno", "para qu√© es bueno", "qu√© beneficios", "qu√© hace"]
    texto = texto.lower()
    return any(patron in texto for patron in patrones)

# Funci√≥n para extraer posible ingrediente
def extraer_ingrediente(texto):
    palabras = re.findall(r'\b[a-z√°√©√≠√≥√∫√±]+\b', texto.lower())
    exclusiones = {"para", "qu√©", "sirve", "beneficio", "beneficios", "ayuda", "utilidad", "es", "el", "la", "los", "las", "un", "una", "de", "del", "en", "con", "y", "bueno", "hace"}
    ingredientes = [palabra for palabra in palabras if palabra not in exclusiones]
    return ingredientes[0] if ingredientes else ""

# Funci√≥n para consultar OpenAI sobre beneficio de un ingrediente
def consultar_openai_beneficio(ingrediente):
    mensaje_usuario = f"¬øPara qu√© sirve el suplemento naturista {ingrediente}?"
    try:
        respuesta = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            temperature=0.5,
            max_tokens=150,
            messages=[
                {"role": "system", "content": "Eres un asesor experto en suplementos naturistas. Responde de forma clara, breve y sin prometer curas."},
                {"role": "user", "content": mensaje_usuario}
            ]
        )
        return respuesta.choices[0].message['content'].strip()
    except Exception as e:
        return f"‚ùå Error consultando OpenAI: {e}"

# Funci√≥n para consultar OpenAI sobre malestar o s√≠ntoma
def consultar_openai_malestar(pregunta_usuario):
    mensaje_usuario = f"""
Eres un asesor experto en suplementos naturistas.

Un usuario te pregunta: '{pregunta_usuario}'.
Sugiere de forma breve y responsable suplementos naturistas que podr√≠an apoyar esa situaci√≥n.
Nunca hagas diagn√≥stico m√©dico. Siempre sugiere consultar a un profesional de la salud si el s√≠ntoma persiste.
"""
    try:
        respuesta = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            temperature=0.5,
            max_tokens=200,
            messages=[
                {"role": "system", "content": "Eres un asesor experto en suplementos naturistas."},
                {"role": "user", "content": mensaje_usuario}
            ]
        )
        return respuesta.choices[0].message['content'].strip()
    except Exception as e:
        return f"‚ùå Error consultando OpenAI: {e}"

# Funci√≥n para clasificar necesidad (por categor√≠a)
def clasificar_necesidad(texto_usuario):
    texto_usuario = texto_usuario.lower()
    for palabra, categoria in mapa_categorias.items():
        if palabra in texto_usuario:
            return categoria
    return None

# Funci√≥n para buscar productos relacionados al texto
def buscar_productos_relacionados(df, texto_usuario):
    palabras_clave = re.findall(r'\b[a-z√°√©√≠√≥√∫√±]+\b', texto_usuario.lower())
    resultados = pd.DataFrame()
    for palabra in palabras_clave:
        coincidencias = df[df['nombre'].str.contains(palabra, case=False, na=False)]
        resultados = pd.concat([resultados, coincidencias])
    resultados = resultados.drop_duplicates()
    return resultados

# Cargar cat√°logo
df_productos = cargar_catalogo()
if not df_productos.empty:
    df_productos.columns = df_productos.columns.str.strip().str.lower()
    nombre_columna_categoria = df_productos.columns[4]

# Interfaz Streamlit
st.title("üîé Consulta - Karolo")
st.header("üëã Hola, ¬øEn qu√© te puedo ayudar?")

st.markdown("""
Puedes preguntarme:

- Quiero algo para la circulaci√≥n
- ¬øQu√© recomiendas para fortalecer defensas?
- ¬øTienes algo para la diabetes?
- ¬øPara qu√© sirve el zinc?
- Tengo dolor de cabeza
- Tengo diarrea
- Tengo c√≥lico
""")

# Selecci√≥n del tipo de consulta
tipo_consulta = st.radio(
    "Selecciona el tipo de consulta:",
    ("Consulta por producto o beneficio", "Consulta por s√≠ntoma o malestar")
)

consulta_necesidad = st.text_input("‚úçÔ∏è Escribe tu necesidad o pregunta:")

if consulta_necesidad:
    st.info("üîé Analizando tu consulta...")

    if tipo_consulta == "Consulta por producto o beneficio":
        if detectar_consulta_beneficio(consulta_necesidad):
            ingrediente = extraer_ingrediente(consulta_necesidad)
            if ingrediente:
                st.success(f"‚úÖ Consulta detectada sobre ingrediente: **{ingrediente.capitalize()}**")
                with st.spinner("Consultando experto..."):
                    descripcion = consultar_openai_beneficio(ingrediente)
                st.info(f"‚ÑπÔ∏è {descripcion}")
            else:
                st.warning("‚ö†Ô∏è No se pudo identificar claramente el ingrediente.")
        else:
            categoria_detectada = clasificar_necesidad(consulta_necesidad)
            if categoria_detectada and not df_productos.empty:
                st.success(f"‚úÖ Necesidad detectada: **{categoria_detectada.capitalize()}**")
                productos_categoria = df_productos[
                    df_productos[nombre_columna_categoria].astype(str).str.lower() == categoria_detectada.lower()
                ]

                if not productos_categoria.empty:
                    st.subheader("üéØ Productos disponibles:")
                    for idx, row in productos_categoria.iterrows():
                        codigo = str(row['c√≥digo'])
                        nombre = row['nombre']
                        precio = float(row['precio de venta con iva'])
                        st.write(f"{codigo} | {nombre} | ${precio:,.2f}")
                else:
                    st.warning(f"‚ö†Ô∏è No se encontraron productos para: **{categoria_detectada.capitalize()}**.")
            else:
                st.warning("‚ö†Ô∏è No pudimos interpretar tu solicitud o no hay datos disponibles.")
    else:
        # Consulta por s√≠ntoma o malestar
        st.success("‚úÖ Consulta tipo s√≠ntoma detectada.")
        with st.spinner("Consultando experto naturista..."):
            respuesta = consultar_openai_malestar(consulta_necesidad)
        st.info(f"‚ÑπÔ∏è {respuesta}")

        buscar_productos = st.checkbox("üîé ¬øQuieres ver si tenemos productos para esto?")
        if buscar_productos and not df_productos.empty:
            resultados = buscar_productos_relacionados(df_productos, consulta_necesidad)
            if not resultados.empty:
                st.subheader("üéØ Productos relacionados encontrados:")
                for idx, row in resultados.iterrows():
                    codigo = str(row['c√≥digo'])
                    nombre = row['nombre']
                    precio = float(row['precio de venta con iva'])
                    st.write(f"{codigo} | {nombre} | ${precio:,.2f}")
            else:
                st.warning("‚ö†Ô∏è No se encontraron productos relacionados en el cat√°logo.")
