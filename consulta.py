import streamlit as st
import pandas as pd
import openai

# Configurar API Key de OpenAI
openai.api_key = st.secrets["OPENAI_API_KEY"]

# Funci√≥n para cargar el cat√°logo naturista
@st.cache_data
def cargar_catalogo():
    return pd.read_excel('naturista.xlsx')

# Mapeo interno: palabras clave asociadas a categor√≠as reales
mapa_categorias = {
    "visi√≥n": "ojos",
    "vista": "ojos",
    "ojos": "ojos",
    "ocular": "ojos",
    "circulaci√≥n": "circulacion",
    "sangre": "circulacion",
    "varices": "circulacion",
    "energ√≠a": "energia",
    "cansancio": "energia",
    "fatiga": "energia",
    "defensas": "vitaminas",
    "inmunidad": "vitaminas",
    "gripas": "vitaminas",
    "digesti√≥n": "digestion",
    "est√≥mago": "digestion",
    "colon": "digestion",
    "h√≠gado": "higado",
    "desintoxicar": "higado",
    "articulaciones": "articulaciones",
    "rodillas": "articulaciones",
    "huesos": "articulaciones",
    "diabetes": "diabetes",
    "az√∫car": "diabetes",
    "ansiedad": "tranquilidad",
    "dormir": "tranquilidad",
    "nervios": "tranquilidad",
    "pulmones": "respiratorio",
    "tos": "respiratorio",
    "bronquios": "respiratorio",
    "memoria": "funcion cerebral",
    "concentraci√≥n": "funcion cerebral",
}

# Funci√≥n para clasificar autom√°ticamente la necesidad del usuario
def clasificar_necesidad(texto_usuario):
    texto_usuario = texto_usuario.lower()
    for palabra, categoria in mapa_categorias.items():
        if palabra in texto_usuario:
            return categoria
    return None

# Funci√≥n para obtener una breve descripci√≥n de un producto utilizando OpenAI
def obtener_descripcion_producto(nombre_producto, categoria_producto):
    prompt = f"""
Eres un asesor experto en suplementos naturistas.

Describe brevemente (m√°ximo 2 l√≠neas) el posible beneficio de un suplemento llamado "{nombre_producto}", perteneciente a la categor√≠a de "{categoria_producto}".
No inventes enfermedades ni tratamientos m√©dicos espec√≠ficos. No repitas el nombre completo.
S√© claro, breve y realista basado en el contexto de suplementos naturistas.
"""
    try:
        respuesta = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            temperature=0.5,
            max_tokens=150,
            messages=[
                {"role": "system", "content": "Eres un asesor experto en suplementos naturistas."},
                {"role": "user", "content": prompt}
            ]
        )
        descripcion = respuesta.choices[0].message['content'].strip()
        return descripcion
    except Exception as e:
        return f"‚ùå Error generando descripci√≥n: {e}"

# Cargar el cat√°logo
df_productos = cargar_catalogo()

# Normalizaci√≥n de nombres de columnas
df_productos.columns = df_productos.columns.str.strip().str.lower()

# Identificaci√≥n de la quinta columna como categor√≠a
nombre_columna_categoria = df_productos.columns[4]

# Configuraci√≥n de la aplicaci√≥n en Streamlit
st.title("üîé Consulta - Karolo")

st.header("üëã Bienvenido. ¬øEn qu√© puedo asistirle hoy?")

st.markdown(
    """
    Puede realizar consultas como:

    - Quiero algo para la circulaci√≥n
    - ¬øQu√© recomiendas para fortalecer defensas?
    - ¬øTienes algo para la diabetes?
    - Me siento cansado, ¬øqu√© puedo tomar?
    - Necesito gotas para los ojos

    Estoy a su disposici√≥n para asistirlo. üåü
    """
)

# Entrada de consulta del usuario
consulta_necesidad = st.text_input("Escriba su necesidad:")

if consulta_necesidad:
    st.info("üîé Analizando su consulta...")

    categoria_detectada = clasificar_necesidad(consulta_necesidad)

    if categoria_detectada:
        st.success(f"‚úÖ Necesidad detectada: **{categoria_detectada.capitalize()}**")

        # Filtrar productos por categor√≠a detectada
        productos_categoria = df_productos[
            df_productos[nombre_columna_categoria].astype(str).str.lower() == categoria_detectada.lower()
        ]

        if not productos_categoria.empty:
            st.subheader("üéØ Productos sugeridos:")

            opciones = [
                f"{str(row['c√≥digo'])} - {row['nombre']}"
                for idx, row in productos_categoria.iterrows()
            ]
            
            seleccionado = st.radio(
                "Seleccione un producto para consultar detalles:",
                opciones,
                index=None
            )

            if seleccionado:
                codigo_seleccionado = seleccionado.split(" - ")[0]

                # Asegurar que la comparaci√≥n sea entre strings
                producto_seleccionado = productos_categoria[
                    productos_categoria['c√≥digo'].astype(str) == codigo_seleccionado
                ].iloc[0]

                # Obtener nombre y categor√≠a del producto seleccionado
                nombre_producto = producto_seleccionado['nombre']
                categoria_producto = producto_seleccionado[nombre_columna_categoria]

                descripcion = obtener_descripcion_producto(nombre_producto, categoria_producto)

                st.info(f"üîπ **{nombre_producto}**\n\n‚ÑπÔ∏è {descripcion}")

        else:
            st.warning(f"‚ö†Ô∏è No se encontraron productos relacionados con: **{categoria_detectada.capitalize()}**.")

    else:
        st.warning("‚ö†Ô∏è No fue posible detectar su necesidad. Intente ser m√°s espec√≠fico o utilice t√©rminos comunes.")
